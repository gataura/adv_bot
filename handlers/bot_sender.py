import requests
from flask import current_app
from models.message import MessageWrapper, Message, EntityType, File
from config import Config
import json

def send_request_to_bot(data):
    current_app.logger.info(f"–ó–∞–ø—Ä–æ—Å: {data}")
    try:
        response = requests.post(
            current_app.config.get('BOT_ENDPOINT'),
            json=data,
            timeout=5
        )

        if response.ok:
            current_app.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.json()}")
        else:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–µ—Å—Ç–∞ {response.status_code}: {response.text}")

    except requests.exceptions.RequestException as e:
        current_app.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É: {e}")

def send_message_to_bot(message):
    data = {"message": message}

    send_request_to_bot(data)

def send_deploy_pic(thread_id):
    current_app.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
    text = standup_text = "ATTENTION PLEASE!!"

    file = File(
        key = Config.DEPLOY_PIC_URL,
        name = "deploy_adv.jpeg",
        file_type = "image",
        size = 68370,
        width = 1000,
        height = 562
    )
    files = [file]
    messageInterface = Message(
        entity_type = EntityType.THREAD,
        entity_id = thread_id,
        content = text,
        link_preview = False,
        files = files
    )
    send_message(message=messageInterface)

def send_mr_reminder(thread_id):
    message = Message(
        entity_type = EntityType.THREAD,
        entity_id = thread_id,
        content = "–í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–µ—Ä–∂–∏–º‚Ä¶\n–ú—ã –º–µ—Ä–∂–∏–º —Å —á–µ–∫–ª–∏—Å—Ç–æ–º.\n–ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–µ–º—å—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Ä–µ–≤—å—é–µ—Ä–∞–º–∏ üõ†Ô∏è"
    )
    send_message(message=message)

def send_core_standup_reminder():
    current_app.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ç–µ–Ω–¥–∞–ø–µ –∫–æ—Ä—ã")
    text = standup_text = "üöÄ –î—Ä—É–∑—å—è, –ø–æ—Ä–∞ –Ω–∞ —Å—Ç–µ–Ω–¥–∞–ø!\n–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å: https://meet.pachca.com/adv-core-07d63791"

    core_chat_id = Config.CORE_CHAT_ID
    messageCore = Message(
        entity_type = EntityType.DISCUSSION,
        entity_id = core_chat_id,
        content = text,
        link_preview = False
    )
    send_message(message=messageCore)

def send_interface_standup_reminder():
    current_app.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ç–µ–Ω–¥–∞–ø–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    text = standup_text = "üöÄ –î—Ä—É–∑—å—è, –ø–æ—Ä–∞ –Ω–∞ —Å—Ç–µ–Ω–¥–∞–ø!\n–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å: https://meet.pachca.com/adv-interface-8db1807d"

    interface_chat_id = Config.INTERFACE_CHAT_ID
    messageInterface = Message(
        entity_type = EntityType.DISCUSSION,
        entity_id = interface_chat_id,
        content = text,
        link_preview = False
    )
    send_message(message=messageInterface)


def create_thread(message_id):
    url = f"https://api.pachca.com/api/shared/v1//messages/{message_id}/thread"
    headers = {Config.API_TOKEN}
    
    try:
        response = requests.post(url, headers=headers, timeout=5)
        
        if response.ok:
            thread_id = response.json().get("data").get("id")
            current_app.logger.info(f"–¢—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω: {thread_id}")
            return thread_id
        else:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞ {response.status_code}: {response.text}")
    except requests.exceptions.RequestException as e:
        current_app.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥: {e}")
    
    return None
    
def send_message_to_thread(message, thread_id):
    data = {"message": message, "thread_id": thread_id}
    send_request_to_bot(data)

def send_message(message):
    request = MessageWrapper(message=message)
    headers = Config.HEADERS
    json = request.model_dump()
    current_app.logger.info(f"–ó–∞–ø—Ä–æ—Å: {json}")
    try:
        response = requests.post(
            current_app.config.get('MESSAGE_ENDPOINT'),
            headers=headers,
            json=json,
            timeout=5
        )

        if response.ok:
            current_app.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.json()}")
        else:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–≤–µ—Å—Ç–∞ {response.status_code}: {response.text}")

    except requests.exceptions.RequestException as e:
        current_app.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É: {e}")